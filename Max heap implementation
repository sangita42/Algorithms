#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class heap{
    public:
    vector<int>pq;
    void heapify_del(int i){
        int largest=i;
        int left=2*i+1;
        int right=2*i+2;
        if(left<pq.size()&&pq[largest]<pq[left]){
            largest=left;
        }
        if(right<pq.size()&&pq[largest]<pq[right]){
            largest=right;
        }
        if(largest!=i){
            swap(pq[i],pq[largest]);
            heapify_del(largest);
        }
        
        
    }
    void heapify_par(int i){
        int parent=(i-1)/2;
        if(i&&pq[parent]<pq[i]){
            swap(pq[i],pq[parent]);
            heapify_par(parent);
        }
    }
    void push(int x){
        pq.push_back(x);
        int ind=pq.size()-1;
        heapify_par(ind);
    }
    void pop(){
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        heapify_del(0);
    }
    int size(){
        return pq.size();
    }
    int top(){
        return pq[0];
    }
    
    
};

int main() {
    heap h;
    h.push(6);
    h.push(8);
    h.push(2);
    h.push(23);
    h.push(78);
    cout<<"size is"<<h.size()<<" ";
    cout<< h.top();
    h.pop();
    cout<<"size"<<h.size();
    cout<<"new size after deletion"<<h.top();
    
	
	return 0;
}
